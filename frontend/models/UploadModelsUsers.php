<?php
/**
 * Created by PhpStorm.
 * User: zebra
 * Date: 24.09.2022
 * Time: 9:16
 */

namespace frontend\models;


use common\models\User;
use DateTime;


class uploadModelsUsers extends User
{


    public static function tableName()
{
    return '{{%users}}';
}


    public function rules()
    {

        return [

            ['username','string', 'max' => 255],
            ['username', 'required', 'message' => 'Обязательно для заполнения'],
            ['email','email', 'message' => 'Введите верное поле'],
            ['email','required' , 'message' => 'Обязательно для заполнения'],
            ['email','string', 'max' => 50],
            ['validts', 'required' , 'message' => 'Обязательно для заполнения' ],
            ['confirmed','integer'],
            ['confirmed','required' , 'message' => 'Обязательно для заполнения'],
            ['validts', 'validateBirth' ],

//            [['validts'], 'date', 'format' => 'd-m-Y']
//            ['validts', 'date', 'format' => 'php:d-m-Y'],
            ];

    }



    public function attributeLabels()
    {
        return [
            'username' =>'Логин',
            'email' =>'email',
            'validts' =>'Дата завершения подписки',
            'confirmed' =>'Подтвержденный аккаунт(да/нет)',

                ];

}

    public function validateBirth($attribute) {

        if (strtotime($this->$attribute)) {
            $dateV_str=$this->$attribute;
        } else {
            $this->addError($attribute, 'Введите корректную дату');;
            return false;
        }
        $arrNum = explode ('.', $dateV_str); //массив с числам
        $today = date("d.m.Y");
        $first = DateTime::createFromFormat('d.m.Y',  $dateV_str); //  заданная
        $second = DateTime::createFromFormat('d.m.Y', $today ); // сегодня
        $year = explode ('.', $today);
        $diffYear =  $year[2]-90;

        if(!empty($arrNum [0])) {
            if (!empty($arrNum [1])) {
                if (!empty($arrNum [2])) {
                    if (checkdate($arrNum [1], $arrNum [0], $arrNum [2]) && ($arrNum [2] > $diffYear) && ($first < $second)) {//Плавающий диапазон 10/05/2021
                        return true;
                    }
                }else {
                    $this->addError($attribute, 'Введите корректную дату');
                    return false;
                }
            }else {
                $this->addError($attribute, 'Введите корректную дату');
                return false;
            }
        }
        else {
            $this->addError($attribute, 'Введите корректную дату');
            return false;
        }
    }




    public function beforeValidate()
    {

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    public function beforeSave($insert)
    {

        if (parent::beforeSave($insert)) {

            $this->validts ? $this->validts = strtotime($this->validts) : $this->validts = null;
            return parent::beforeSave($insert); // TODO: Change the autogenerated stub
        }
    }
}